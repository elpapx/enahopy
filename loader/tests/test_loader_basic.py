#!/usr/bin/env python3
"""
Script de prueba b√°sica para el m√≥dulo loader de enahopy
Prueba funcionalidades esenciales sin realizar descargas reales
"""

import sys
from pathlib import Path

# Agregar el directorio del proyecto al path
project_dir = Path(__file__).parent.parent  # Ajustar seg√∫n ubicaci√≥n
sys.path.insert(0, str(project_dir))


def test_imports():
    """Test 1: Verificar que todos los imports funcionan"""
    print("=" * 60)
    print("TEST 1: VERIFICACI√ìN DE IMPORTS")
    print("=" * 60)

    try:
        # Core imports
        from loader.core import ENAHOConfig, ENAHOError, setup_logging, CacheManager
        print("‚úÖ Core imports OK")

        # IO imports
        from loader.io import ENAHODataDownloader, ENAHOLocalReader
        print("‚úÖ IO imports OK")

        # Utils imports
        from loader.utils import download_enaho_data, read_enaho_file, ENAHOUtils
        print("‚úÖ Utils imports OK")

        # Validators imports
        from loader.io.validators import ENAHOValidator
        print("‚úÖ Validators imports OK")

        return True

    except ImportError as e:
        print(f"‚ùå Error de importaci√≥n: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        return False


def test_configuration():
    """Test 2: Verificar la configuraci√≥n"""
    print("\n" + "=" * 60)
    print("TEST 2: CONFIGURACI√ìN")
    print("=" * 60)

    try:
        from loader.core import ENAHOConfig

        # Crear configuraci√≥n por defecto
        config = ENAHOConfig()

        print(f"üìç URL Base: {config.base_url}")
        print(f"üìÇ Directorio de cache: {config.cache_dir}")
        print(f"‚è±Ô∏è  TTL del cache: {config.cache_ttl_hours} horas")
        print(f"üë• Max workers por defecto: {config.default_max_workers}")

        # Verificar m√≥dulos disponibles
        print(f"\nüì¶ M√≥dulos disponibles: {len(config.AVAILABLE_MODULES)}")
        for code, desc in list(config.AVAILABLE_MODULES.items())[:3]:
            print(f"   - {code}: {desc[:50]}...")

        # Verificar a√±os disponibles
        print(f"\nüìÖ A√±os transversales: {len(config.YEAR_MAP_TRANSVERSAL)}")
        years_trans = sorted(config.YEAR_MAP_TRANSVERSAL.keys(), reverse=True)[:5]
        print(f"   √öltimos a√±os: {years_trans}")

        print(f"\nüìÖ A√±os panel: {len(config.YEAR_MAP_PANEL)}")
        years_panel = sorted(config.YEAR_MAP_PANEL.keys(), reverse=True)[:5]
        print(f"   √öltimos a√±os: {years_panel}")

        return True

    except Exception as e:
        print(f"‚ùå Error en configuraci√≥n: {e}")
        return False


def test_downloader_creation():
    """Test 3: Crear instancia del downloader"""
    print("\n" + "=" * 60)
    print("TEST 3: CREACI√ìN DEL DOWNLOADER")
    print("=" * 60)

    try:
        from loader.io import ENAHODataDownloader

        # Crear downloader sin verbose para evitar logs
        downloader = ENAHODataDownloader(verbose=False)
        print("‚úÖ Downloader creado exitosamente")

        # Obtener informaci√≥n disponible
        years = downloader.get_available_years(is_panel=False)
        modules = downloader.get_available_modules()

        print(f"üìÖ A√±os disponibles: {len(years)}")
        print(f"   Rango: {years[-1]} - {years[0]}")

        print(f"üì¶ M√≥dulos disponibles: {len(modules)}")
        module_list = list(modules.keys())[:5]
        print(f"   Primeros m√≥dulos: {module_list}")

        return True

    except Exception as e:
        print(f"‚ùå Error creando downloader: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_validation():
    """Test 4: Validaci√≥n de par√°metros"""
    print("\n" + "=" * 60)
    print("TEST 4: VALIDACI√ìN DE PAR√ÅMETROS")
    print("=" * 60)

    try:
        from loader.io import ENAHODataDownloader

        downloader = ENAHODataDownloader(verbose=False)

        # Test 1: Validaci√≥n exitosa
        print("\nüîç Validaci√≥n con par√°metros correctos:")
        result = downloader.validate_availability(
            modules=["01", "34"],
            years=["2023", "2022"],
            is_panel=False
        )

        if result['status'] == 'valid':
            print("‚úÖ Validaci√≥n exitosa")
            print(f"   - M√≥dulos: {result['modules']}")
            print(f"   - A√±os: {result['years']}")
            print(f"   - Tipo: {result['dataset_type']}")
            print(f"   - Descargas estimadas: {result['estimated_downloads']}")
        else:
            print(f"‚ùå Validaci√≥n fall√≥: {result.get('error', 'Error desconocido')}")

        # Test 2: Validaci√≥n con error (m√≥dulo inv√°lido)
        print("\nüîç Validaci√≥n con m√≥dulo inv√°lido:")
        result = downloader.validate_availability(
            modules=["99"],  # M√≥dulo que no existe
            years=["2023"],
            is_panel=False
        )

        if result['status'] == 'invalid':
            print("‚úÖ Error detectado correctamente")
            print(f"   - Error: {result.get('error', 'N/A')}")
        else:
            print("‚ùå Deber√≠a haber detectado el error")

        # Test 3: Validaci√≥n con a√±o inv√°lido
        print("\nüîç Validaci√≥n con a√±o inv√°lido:")
        result = downloader.validate_availability(
            modules=["01"],
            years=["1990"],  # A√±o muy antiguo
            is_panel=False
        )

        if result['status'] == 'invalid':
            print("‚úÖ Error detectado correctamente")
            print(f"   - Error: {result.get('error', 'N/A')}")
        else:
            print("‚ùå Deber√≠a haber detectado el error")

        return True

    except Exception as e:
        print(f"‚ùå Error en validaci√≥n: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_utilities():
    """Test 5: Funciones de utilidad"""
    print("\n" + "=" * 60)
    print("TEST 5: FUNCIONES DE UTILIDAD")
    print("=" * 60)

    try:
        from loader.utils import ENAHOUtils, get_available_data, validate_download_request

        # Test 1: Obtener datos disponibles
        print("\nüìä Informaci√≥n de datos disponibles:")
        data_info = get_available_data(is_panel=False)
        print(f"‚úÖ Tipo de dataset: {data_info['dataset_type']}")
        print(f"   - A√±os disponibles: {len(data_info['years'])}")
        print(f"   - M√≥dulos disponibles: {len(data_info['modules'])}")

        # Test 2: Estimaci√≥n de tama√±o
        print("\nüíæ Estimaci√≥n de tama√±o de descarga:")
        estimate = ENAHOUtils.estimate_download_size(
            modules=["01", "34"],
            years=["2023", "2022"]
        )
        print(f"‚úÖ Tama√±o total estimado: {estimate['total_mb']:.1f} MB")
        print(f"   - En GB: {estimate['total_gb']:.2f} GB")
        print(f"   - Comprimido: ~{estimate['compressed_size']:.1f} MB")

        # Test 3: Descripci√≥n de m√≥dulos
        print("\nüìù Descripci√≥n de m√≥dulos:")
        for module in ["01", "34", "37"]:
            desc = ENAHOUtils.get_module_description(module)
            print(f"‚úÖ M√≥dulo {module}: {desc[:60]}...")

        # Test 4: Recomendaci√≥n de paralelizaci√≥n
        print("\n‚ö° Recomendaciones de paralelizaci√≥n:")
        for num in [2, 5, 10, 25]:
            rec = ENAHOUtils.recommend_parallel_settings(num)
            print(f"‚úÖ Para {num} descargas: {rec['max_workers']} workers ({rec['reason']})")

        return True

    except Exception as e:
        print(f"‚ùå Error en utilidades: {e}")
        import traceback
        traceback.print_exc()
        return False


def main():
    """Ejecutar todas las pruebas"""
    print("\n" + "üöÄ INICIANDO PRUEBAS DEL M√ìDULO LOADER ".center(60, "="))
    print("=" * 60)

    tests = [
        ("Imports", test_imports),
        ("Configuraci√≥n", test_configuration),
        ("Creaci√≥n Downloader", test_downloader_creation),
        ("Validaci√≥n", test_validation),
        ("Utilidades", test_utilities)
    ]

    results = []
    for name, test_func in tests:
        try:
            success = test_func()
            results.append((name, success))
        except Exception as e:
            print(f"\n‚ùå Error ejecutando test {name}: {e}")
            results.append((name, False))

    # Resumen final
    print("\n" + "=" * 60)
    print("RESUMEN DE PRUEBAS")
    print("=" * 60)

    passed = sum(1 for _, success in results if success)
    total = len(results)

    for name, success in results:
        status = "‚úÖ PAS√ì" if success else "‚ùå FALL√ì"
        print(f"{status} - {name}")

    print(f"\nüìä Resultado: {passed}/{total} pruebas pasaron")

    if passed == total:
        print("üéâ ¬°Todas las pruebas pasaron exitosamente!")
    else:
        print(f"‚ö†Ô∏è  {total - passed} pruebas fallaron")

    return passed == total


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)